From 309252e2962582ab83f3e1ca685d3e0051ee7999 Mon Sep 17 00:00:00 2001
From: Cawa Cheng <cawa.cheng@mediatek.com>
Date: Wed, 25 Mar 2015 09:04:16 +0800
Subject: [PATCH 3/6] add support for mediatek

Signed-off-by: JB Tsai <jb.tsai@mediatek.com>
---
 Makefile.am                    |   5 +
 configure.ac                   |  13 ++
 libkms/Makefile.am             |   5 +
 libkms/Makefile.sources        |   3 +
 libkms/internal.h              |   2 +
 libkms/linux.c                 |   5 +
 libkms/mediatek.c              | 222 +++++++++++++++++++++++++++++++++
 mediatek/Makefile.am           |  20 +++
 mediatek/libdrm_mediatek.pc.in |  11 ++
 mediatek/mediatek_drm.c        | 274 +++++++++++++++++++++++++++++++++++++++++
 mediatek/mediatek_drm.h        |  59 +++++++++
 mediatek/mediatek_drmif.h      |  77 ++++++++++++
 12 files changed, 696 insertions(+)
 mode change 100644 => 100755 Makefile.am
 mode change 100644 => 100755 configure.ac
 mode change 100644 => 100755 libkms/Makefile.am
 mode change 100644 => 100755 libkms/Makefile.sources
 mode change 100644 => 100755 libkms/internal.h
 mode change 100644 => 100755 libkms/linux.c
 create mode 100755 libkms/mediatek.c
 create mode 100755 mediatek/Makefile.am
 create mode 100755 mediatek/libdrm_mediatek.pc.in
 create mode 100755 mediatek/mediatek_drm.c
 create mode 100755 mediatek/mediatek_drm.h
 create mode 100755 mediatek/mediatek_drmif.h

diff --git a/Makefile.am b/Makefile.am
old mode 100644
new mode 100755
index 3a6e645..fedf3ba
--- a/Makefile.am
+++ b/Makefile.am
@@ -82,6 +82,10 @@ if HAVE_ROCKCHIP
 ROCKCHIP_SUBDIR = rockchip
 endif
 
+if HAVE_MEDIATEK
+MEDIATEK_SUBDIR = mediatek
+endif
+
 if BUILD_MANPAGES
 if HAVE_MANPAGES_STYLESHEET
 MAN_SUBDIR = man
@@ -100,6 +104,7 @@ SUBDIRS = \
 	$(FREEDRENO_SUBDIR) \
 	$(TEGRA_SUBDIR) \
 	$(ROCKCHIP_SUBDIR) \
+	$(MEDIATEK_SUBDIR) \
 	tests \
 	$(MAN_SUBDIR)
 
diff --git a/configure.ac b/configure.ac
old mode 100644
new mode 100755
index 6682e66..5ba249d
--- a/configure.ac
+++ b/configure.ac
@@ -121,6 +121,11 @@ AC_ARG_ENABLE(freedreno-kgsl,
 	      [Enable support for freedreno's to use downstream android kernel API (default: disabled)]),
 	      [FREEDRENO_KGSL=$enableval], [FREEDRENO_KGSL=no])
 
+AC_ARG_ENABLE(mediatek-experimental-api,
+	      AS_HELP_STRING([--enable-mediatek-experimental-api],
+	      [Enable support for Mediatek's experimental API (default: disabled)]),
+	      [MEDIATEK=$enableval], [MEDIATEK=no])
+
 AC_ARG_ENABLE(tegra-experimental-api,
 	      AS_HELP_STRING([--enable-tegra-experimental-api],
 	      [Enable support for Tegra's experimental API (default: disabled)]),
@@ -364,6 +369,11 @@ if test "x$RADEON" = xyes; then
 	AC_DEFINE(HAVE_RADEON, 1, [Have radeon support])
 fi
 
+AM_CONDITIONAL(HAVE_MEDIATEK, [test "x$MEDIATEK" = xyes])
+if test "x$MEDIATEK" = xyes; then
+	AC_DEFINE(HAVE_MEDIATEK, 1, [Have MEDIATEK support])
+fi
+
 # Detect cunit library
 PKG_CHECK_MODULES([CUNIT], [cunit >= 2.1], [have_cunit=yes], [have_cunit=no])
 # If pkg-config does not find cunit, check it using AC_CHECK_LIB.  We
@@ -504,6 +514,8 @@ AC_CONFIG_FILES([
 	exynos/libdrm_exynos.pc
 	freedreno/Makefile
 	freedreno/libdrm_freedreno.pc
+	mediatek/Makefile
+	mediatek/libdrm_mediatek.pc
 	tegra/Makefile
 	tegra/libdrm_tegra.pc
 	rockchip/Makefile
@@ -535,6 +547,7 @@ echo "  Nouveau API    $NOUVEAU"
 echo "  OMAP API       $OMAP"
 echo "  EXYNOS API     $EXYNOS"
 echo "  Freedreno API  $FREEDRENO (kgsl: $FREEDRENO_KGSL)"
+echo "  Mediatek API   $MEDIATEK"
 echo "  Tegra API      $TEGRA"
 echo "  Rockchip API   $ROCKCHIP"
 echo ""
diff --git a/libkms/Makefile.am b/libkms/Makefile.am
old mode 100644
new mode 100755
index 6c0ab7a..a19fa31
--- a/libkms/Makefile.am
+++ b/libkms/Makefile.am
@@ -37,6 +37,11 @@ libkms_la_SOURCES += $(LIBKMS_EXYNOS_FILES)
 AM_CFLAGS += -I$(top_srcdir)/exynos
 endif
 
+if HAVE_MEDIATEK
+libkms_la_SOURCES += $(LIBKMS_MEDIATEK_FILES)
+AM_CFLAGS += -I$(top_srcdir)/mediatek
+endif
+
 libkmsincludedir = ${includedir}/libkms
 libkmsinclude_HEADERS = $(LIBKMS_H_FILES)
 
diff --git a/libkms/Makefile.sources b/libkms/Makefile.sources
old mode 100644
new mode 100755
index 3191f51..2c1a10a
--- a/libkms/Makefile.sources
+++ b/libkms/Makefile.sources
@@ -19,5 +19,8 @@ LIBKMS_RADEON_FILES := \
 LIBKMS_EXYNOS_FILES := \
 	exynos.c
 
+LIBKMS_MEDIATEK_FILES := \
+        mediatek.c
+
 LIBKMS_H_FILES := \
 	libkms.h
diff --git a/libkms/internal.h b/libkms/internal.h
old mode 100644
new mode 100755
index 905f5b1..439e230
--- a/libkms/internal.h
+++ b/libkms/internal.h
@@ -81,4 +81,6 @@ drm_private int radeon_create(int fd, struct kms_driver **out);
 
 drm_private int exynos_create(int fd, struct kms_driver **out);
 
+int mediatek_create(int fd, struct kms_driver **out);
+
 #endif
diff --git a/libkms/linux.c b/libkms/linux.c
old mode 100644
new mode 100755
index 6e0da83..9e00fce
--- a/libkms/linux.c
+++ b/libkms/linux.c
@@ -132,6 +132,11 @@ linux_from_sysfs(int fd, struct kms_driver **out)
 		ret = exynos_create(fd, out);
 	else
 #endif
+#ifdef HAVE_MEDIATEK
+        if (!strcmp(name, "mediatek"))
+                ret = mediatek_create(fd, out);
+        else
+#endif
 		ret = -ENOSYS;
 
 	free(name);
diff --git a/libkms/mediatek.c b/libkms/mediatek.c
new file mode 100755
index 0000000..b1a54c0
--- /dev/null
+++ b/libkms/mediatek.c
@@ -0,0 +1,222 @@
+/*
+ * Copyright (c) 2015 MediaTek Inc.
+ * Author:JB TSAI <jb.tsai@mediatek.com>
+ *
+ * based on rockchip_drm.c
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the next
+ * paragraph) shall be included in all copies or substantial portions of the
+ * Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ *
+ */
+
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
+#include <errno.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include "internal.h"
+
+#include <sys/mman.h>
+#include <sys/ioctl.h>
+#include "xf86drm.h"
+
+#include "mediatek_drm.h"
+
+struct mediatek_bo
+{
+	struct kms_bo base;
+	unsigned map_count;
+};
+
+static int
+mediatek_get_prop(struct kms_driver *kms, unsigned key, unsigned *out)
+{
+	switch (key) {
+	case KMS_BO_TYPE:
+		*out = KMS_BO_TYPE_SCANOUT_X8R8G8B8 | KMS_BO_TYPE_CURSOR_64X64_A8R8G8B8;
+		break;
+	default:
+		return -EINVAL;
+	}
+	return 0;
+}
+
+static int
+mediatek_destroy(struct kms_driver *kms)
+{
+	free(kms);
+	return 0;
+}
+
+static int
+mediatek_bo_create(struct kms_driver *kms,
+		 const unsigned width, const unsigned height,
+		 const enum kms_bo_type type, const unsigned *attr,
+		 struct kms_bo **out)
+{
+	struct drm_mtk_gem_create arg;
+	unsigned size, pitch;
+	struct mediatek_bo *bo;
+	int i, ret;
+
+	for (i = 0; attr[i]; i += 2) {
+		switch (attr[i]) {
+		case KMS_WIDTH:
+		case KMS_HEIGHT:
+		case KMS_BO_TYPE:
+			break;
+		default:
+			return -EINVAL;
+		}
+	}
+
+	bo = calloc(1, sizeof(*bo));
+	if (!bo)
+		return -ENOMEM;
+
+	if (type == KMS_BO_TYPE_CURSOR_64X64_A8R8G8B8) {
+		pitch = 64 * 4;
+		size = 64 * 64 * 4;
+	} else if (type == KMS_BO_TYPE_SCANOUT_X8R8G8B8) {
+		pitch = width * 4;
+		pitch = (pitch + 512 - 1) & ~(512 - 1);
+		size = pitch * ((height + 4 - 1) & ~(4 - 1));
+	} else {
+		return -EINVAL;
+	}
+
+	memset(&arg, 0, sizeof(arg));
+	arg.size = size;
+
+	ret = drmCommandWriteRead(kms->fd, DRM_MTK_GEM_CREATE, &arg, sizeof(arg));
+	if (ret)
+		goto err_free;
+
+	bo->base.kms = kms;
+	bo->base.handle = arg.handle;
+	bo->base.size = size;
+	bo->base.pitch = pitch;
+
+	*out = &bo->base;
+
+	return 0;
+
+err_free:
+	free(bo);
+	return ret;
+}
+
+static int
+mediatek_bo_get_prop(struct kms_bo *bo, unsigned key, unsigned *out)
+{
+	switch (key) {
+	default:
+		return -EINVAL;
+	}
+}
+
+static int
+mediatek_bo_map(struct kms_bo *_bo, void **out)
+{
+	struct mediatek_bo *bo = (struct mediatek_bo *)_bo;
+	struct drm_mtk_gem_map_off arg;
+	void *map = NULL;
+	int ret;
+
+	if (bo->base.ptr) {
+		bo->map_count++;
+		*out = bo->base.ptr;
+		return 0;
+	}
+
+	memset(&arg, 0, sizeof(arg));
+	arg.handle = bo->base.handle;
+
+	ret = drmCommandWriteRead(bo->base.kms->fd, DRM_MTK_GEM_MAP_OFFSET, &arg, sizeof(arg));
+	if (ret)
+		return ret;
+
+	map = mmap(0, bo->base.size, PROT_READ | PROT_WRITE, MAP_SHARED, bo->base.kms->fd, arg.offset);
+	if (map == MAP_FAILED)
+		return -errno;
+
+	bo->base.ptr = map;
+	bo->map_count++;
+	*out = bo->base.ptr;
+
+	return 0;
+}
+
+static int
+mediatek_bo_unmap(struct kms_bo *_bo)
+{
+	struct mediatek_bo *bo = (struct mediatek_bo *)_bo;
+	bo->map_count--;
+	return 0;
+}
+
+static int
+mediatek_bo_destroy(struct kms_bo *_bo)
+{
+	struct mediatek_bo *bo = (struct mediatek_bo *)_bo;
+	struct drm_gem_close arg;
+	int ret;
+
+	if (bo->base.ptr) {
+		/* XXX Sanity check map_count */
+		munmap(bo->base.ptr, bo->base.size);
+		bo->base.ptr = NULL;
+	}
+
+	memset(&arg, 0, sizeof(arg));
+	arg.handle = bo->base.handle;
+
+	ret = drmIoctl(bo->base.kms->fd, DRM_IOCTL_GEM_CLOSE, &arg);
+	if (ret)
+		return -errno;
+
+	free(bo);
+	return 0;
+}
+
+int
+mediatek_create(int fd, struct kms_driver **out)
+{
+	struct kms_driver *kms;
+
+	kms = calloc(1, sizeof(*kms));
+	if (!kms)
+		return -ENOMEM;
+
+	kms->fd = fd;
+
+	kms->bo_create = mediatek_bo_create;
+	kms->bo_map = mediatek_bo_map;
+	kms->bo_unmap = mediatek_bo_unmap;
+	kms->bo_get_prop = mediatek_bo_get_prop;
+	kms->bo_destroy = mediatek_bo_destroy;
+	kms->get_prop = mediatek_get_prop;
+	kms->destroy = mediatek_destroy;
+	*out = kms;
+
+	return 0;
+}
diff --git a/mediatek/Makefile.am b/mediatek/Makefile.am
new file mode 100755
index 0000000..bb23e46
--- /dev/null
+++ b/mediatek/Makefile.am
@@ -0,0 +1,20 @@
+AM_CFLAGS = \
+	$(WARN_CFLAGS) \
+	-I$(top_srcdir) \
+	-I$(top_srcdir)/mediatek \
+	$(PTHREADSTUBS_CFLAGS) \
+	-I$(top_srcdir)/include/drm
+
+libdrm_mediatek_la_LTLIBRARIES = libdrm_mediatek.la
+libdrm_mediatek_ladir = $(libdir)
+libdrm_mediatek_la_LDFLAGS = -version-number 1:0:0 -no-undefined
+libdrm_mediatek_la_LIBADD = ../libdrm.la @PTHREADSTUBS_LIBS@
+
+libdrm_mediatek_la_SOURCES = \
+	mediatek_drm.c
+
+libdrm_mediatekincludedir = ${includedir}/libdrm
+libdrm_mediatekinclude_HEADERS = mediatek_drmif.h mediatek_drm.h
+
+pkgconfigdir = @pkgconfigdir@
+pkgconfig_DATA = libdrm_mediatek.pc
diff --git a/mediatek/libdrm_mediatek.pc.in b/mediatek/libdrm_mediatek.pc.in
new file mode 100755
index 0000000..eaba97e
--- /dev/null
+++ b/mediatek/libdrm_mediatek.pc.in
@@ -0,0 +1,11 @@
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+libdir=@libdir@
+includedir=@includedir@
+
+Name: libdrm_mediatek
+Description: Userspace interface to mediatek kernel DRM services
+Version: 0.1
+Libs: -L${libdir} -ldrm_mediatek
+Cflags: -I${includedir} -I${includedir}/libdrm
+Requires.private: libdrm
diff --git a/mediatek/mediatek_drm.c b/mediatek/mediatek_drm.c
new file mode 100755
index 0000000..121b266
--- /dev/null
+++ b/mediatek/mediatek_drm.c
@@ -0,0 +1,274 @@
+/*
+ * Copyright (c) 2015 MediaTek Inc.
+ * Author:JB TSAI <jb.tsai@mediatek.com>
+ *
+ * based on rockchip_drm.c
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the next
+ * paragraph) shall be included in all copies or substantial portions of the
+ * Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ *
+ */
+
+#ifdef HAVE_CONFIG_H
+#include "config.h"
+#endif
+
+#include <stdlib.h>
+#include <stdio.h>
+#include <string.h>
+#include <errno.h>
+
+#include <sys/mman.h>
+#include <linux/stddef.h>
+
+#include <xf86drm.h>
+
+#include "mediatek_drm.h"
+#include "mediatek_drmif.h"
+
+/*
+ * Create mediatek drm device object.
+ *
+ * @fd: file descriptor to mediatek drm driver opened.
+ *
+ * if true, return the device object else NULL.
+ */
+struct mediatek_device *mediatek_device_create(int fd)
+{
+	struct mediatek_device *dev;
+
+	dev = calloc(1, sizeof(*dev));
+	if (!dev) {
+		fprintf(stderr, "failed to create device[%s].\n",
+				strerror(errno));
+		return NULL;
+	}
+
+	dev->fd = fd;
+
+	return dev;
+}
+
+/*
+ * Destroy mediatek drm device object
+ *
+ * @dev: mediatek drm device object.
+ */
+void mediatek_device_destroy(struct mediatek_device *dev)
+{
+	free(dev);
+}
+
+/*
+ * Create a mediatek buffer object to mediatek drm device.
+ *
+ * @dev: mediatek drm device object.
+ * @size: user-desired size.
+ * flags: user-desired memory type.
+ *	user can set one or more types among several types to memory
+ *	allocation and cache attribute types. and as default,
+ *	MEDIATEK_BO_NONCONTIG and MEDIATEK-BO_NONCACHABLE types would
+ *	be used.
+ *
+ * if true, return a mediatek buffer object else NULL.
+ */
+struct mediatek_bo *mediatek_bo_create(struct mediatek_device *dev,
+					size_t size, uint32_t flags)
+{
+	struct mediatek_bo *bo;
+	struct drm_mtk_gem_create req = {
+		.size = size,
+		.flags = flags,
+	};
+
+	if (size == 0) {
+		fprintf(stderr, "invalid size.\n");
+		return NULL;
+	}
+
+	bo = calloc(1, sizeof(*bo));
+	if (!bo) {
+		fprintf(stderr, "failed to create bo[%s].\n",
+				strerror(errno));
+		goto fail;
+	}
+
+	bo->dev = dev;
+
+	if (drmIoctl(dev->fd, DRM_IOCTL_MTK_GEM_CREATE, &req)){
+		fprintf(stderr, "failed to create gem object[%s].\n",
+				strerror(errno));
+		goto err_free_bo;
+	}
+
+	bo->handle = req.handle;
+	bo->size = size;
+	bo->flags = flags;
+
+	return bo;
+
+err_free_bo:
+	free(bo);
+fail:
+	return NULL;
+}
+
+/*
+ * Destroy a mediatek buffer object.
+ *
+ * @bo: a mediatek buffer object to be destroyed.
+ */
+void mediatek_bo_destroy(struct mediatek_bo *bo)
+{
+	if (!bo)
+		return;
+
+	if (bo->vaddr)
+		munmap(bo->vaddr, bo->size);
+
+	if (bo->handle) {
+		struct drm_gem_close req = {
+			.handle = bo->handle,
+		};
+
+		drmIoctl(bo->dev->fd, DRM_IOCTL_GEM_CLOSE, &req);
+	}
+
+	free(bo);
+}
+
+
+/*
+ * Get a mediatek buffer object from a gem global object name.
+ *
+ * @dev: a mediatek device object.
+ * @name: a gem global object name exported by another process.
+ *
+ * this interface is used to get a mediatek buffer object from a gem
+ * global object name sent by another process for buffer sharing.
+ *
+ * if true, return a mediatek buffer object else NULL.
+ *
+ */
+struct mediatek_bo *mediatek_bo_from_name(struct mediatek_device *dev,
+						uint32_t name)
+{
+	struct mediatek_bo *bo;
+	struct drm_gem_open req = {
+		.name = name,
+	};
+
+	bo = calloc(1, sizeof(*bo));
+	if (!bo) {
+		fprintf(stderr, "failed to allocate bo[%s].\n",
+				strerror(errno));
+		return NULL;
+	}
+
+	if (drmIoctl(dev->fd, DRM_IOCTL_GEM_OPEN, &req)) {
+		fprintf(stderr, "failed to open gem object[%s].\n",
+				strerror(errno));
+		goto err_free_bo;
+	}
+
+	bo->dev = dev;
+	bo->name = name;
+	bo->handle = req.handle;
+
+	return bo;
+
+err_free_bo:
+	free(bo);
+	return NULL;
+}
+
+/*
+ * Get a gem global object name from a gem object handle.
+ *
+ * @bo: a mediatek buffer object including gem handle.
+ * @name: a gem global object name to be got by kernel driver.
+ *
+ * this interface is used to get a gem global object name from a gem object
+ * handle to a buffer that wants to share it with another process.
+ *
+ * if true, return 0 else negative.
+ */
+int mediatek_bo_get_name(struct mediatek_bo *bo, uint32_t *name)
+{
+	if (!bo->name) {
+		struct drm_gem_flink req = {
+			.handle = bo->handle,
+		};
+		int ret;
+
+		ret = drmIoctl(bo->dev->fd, DRM_IOCTL_GEM_FLINK, &req);
+		if (ret) {
+			fprintf(stderr, "failed to get gem global name[%s].\n",
+					strerror(errno));
+			return ret;
+		}
+
+		bo->name = req.name;
+	}
+
+	*name = bo->name;
+
+	return 0;
+}
+
+uint32_t mediatek_bo_handle(struct mediatek_bo *bo)
+{
+	return bo->handle;
+}
+
+/*
+ * Mmap a buffer to user space.
+ *
+ * @bo: a mediatek buffer object including a gem object handle to be mmapped
+ *	to user space.
+ *
+ * if true, user pointer mmaped else NULL.
+ */
+void *mediatek_bo_map(struct mediatek_bo *bo)
+{
+	if (!bo->vaddr) {
+		struct mediatek_device *dev = bo->dev;
+		struct drm_mtk_gem_map_off req = {
+			.handle = bo->handle,
+		};
+		int ret;
+
+		ret = drmIoctl(dev->fd, DRM_IOCTL_MTK_GEM_MAP_OFFSET, &req);
+		if (ret) {
+			fprintf(stderr, "failed to ioctl gem map offset[%s].\n",
+				strerror(errno));
+			return NULL;
+		}
+
+		bo->vaddr = mmap(0, bo->size, PROT_READ | PROT_WRITE,
+			   MAP_SHARED, dev->fd, req.offset);
+		if (bo->vaddr == MAP_FAILED) {
+			fprintf(stderr, "failed to mmap buffer[%s].\n",
+				strerror(errno));
+			return NULL;
+		}
+	}
+
+	return bo->vaddr;
+}
diff --git a/mediatek/mediatek_drm.h b/mediatek/mediatek_drm.h
new file mode 100755
index 0000000..6d87d9c
--- /dev/null
+++ b/mediatek/mediatek_drm.h
@@ -0,0 +1,59 @@
+/*
+ * Copyright (c) 2015 MediaTek Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+
+#ifndef _UAPI_MEDIATEK_DRM_H
+#define _UAPI_MEDIATEK_DRM_H
+
+#include "drm.h"
+
+/**
+ * User-desired buffer creation information structure.
+ *
+ * @size: user-desired memory allocation size.
+ *      - this size value would be page-aligned internally.
+ * @flags: user request for setting memory type or cache attributes.
+ * @handle: returned a handle to created gem object.
+ *	- this handle will be set by gem module of kernel side.
+ */
+struct drm_mtk_gem_create {
+	uint64_t size;
+	uint32_t flags;
+	uint32_t handle;
+};
+
+/**
+ * A structure for getting buffer offset.
+ *
+ * @handle: a pointer to gem object created.
+ * @pad: just padding to be 64-bit aligned.
+ * @offset: relatived offset value of the memory region allocated.
+ *	- this value should be set by user.
+ */
+struct drm_mtk_gem_map_off {
+	uint32_t handle;
+	uint32_t pad;
+	uint64_t offset;
+};
+
+#define DRM_MTK_GEM_CREATE              0x00
+#define DRM_MTK_GEM_MAP_OFFSET          0x01
+
+#define DRM_IOCTL_MTK_GEM_CREATE        DRM_IOWR(DRM_COMMAND_BASE + \
+                DRM_MTK_GEM_CREATE, struct drm_mtk_gem_create)
+
+#define DRM_IOCTL_MTK_GEM_MAP_OFFSET    DRM_IOWR(DRM_COMMAND_BASE + \
+                DRM_MTK_GEM_MAP_OFFSET, struct drm_mtk_gem_map_off)
+
+
+#endif /* _UAPI_MEDIATEK_DRM_H */
diff --git a/mediatek/mediatek_drmif.h b/mediatek/mediatek_drmif.h
new file mode 100755
index 0000000..dca8852
--- /dev/null
+++ b/mediatek/mediatek_drmif.h
@@ -0,0 +1,77 @@
+/*
+ * Copyright (c) 2015 MediaTek Inc.
+ * Author:JB TSAI <jb.tsai@mediatek.com>
+ *
+ * based on rockchip_drmif.h
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the next
+ * paragraph) shall be included in all copies or substantial portions of the
+ * Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
+ * SOFTWARE.
+ *
+ */
+
+#ifndef MEDIATEK_DRMIF_H_
+#define MEDIATEK_DRMIF_H_
+
+#include <xf86drm.h>
+#include <stdint.h>
+#include "mediatek_drm.h"
+
+struct mediatek_device {
+	int fd;
+};
+
+/*
+ * Mediatek Buffer Object structure.
+ *
+ * @dev: mediatek device object allocated.
+ * @handle: a gem handle to gem object created.
+ * @flags: indicate memory allocation and cache attribute types.
+ * @size: size to the buffer created.
+ * @vaddr: user space address to a gem buffer mmaped.
+ * @name: a gem global handle from flink request.
+ */
+struct mediatek_bo {
+	struct mediatek_device	*dev;
+	uint32_t		handle;
+	uint32_t		flags;
+	size_t			size;
+	void			*vaddr;
+	uint32_t		name;
+};
+
+/*
+ * device related functions:
+ */
+struct mediatek_device *mediatek_device_create(int fd);
+void mediatek_device_destroy(struct mediatek_device *dev);
+
+/*
+ * buffer-object related functions:
+ */
+struct mediatek_bo *mediatek_bo_create(struct mediatek_device *dev,
+			size_t size, uint32_t flags);
+int mediatek_bo_get_info(struct mediatek_device *dev, uint32_t handle,
+			size_t *size, uint32_t *flags);
+void mediatek_bo_destroy(struct mediatek_bo *bo);
+struct mediatek_bo *mediatek_bo_from_name(struct mediatek_device *dev,
+			uint32_t name);
+int mediatek_bo_get_name(struct mediatek_bo *bo, uint32_t *name);
+uint32_t mediatek_bo_handle(struct mediatek_bo *bo);
+void *mediatek_bo_map(struct mediatek_bo *bo);
+#endif /* MEDIATEK_DRMIF_H_ */
-- 
2.1.2

